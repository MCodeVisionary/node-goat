workflow:
  name: "gitlab-jfrog-node-goat-ci"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never

default:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com

stages:
  - npm_docker_build

include:
  - remote: "https://releases.jfrog.io/artifactory/jfrog-cli/gitlab/v2/.setup-jfrog-unix.yml"

variables:
  JF_URL: "${JF_URL}"
  JF_USERNAME: "${JF_USERNAME}"
  JFROG_CLI_BUILD_PROJECT: "${JF_PROJECT}"
  # JFROG_CLI_LOG_LEVEL: "DEBUG"
  NPM_JF_RT_REPO: "$NPM_JF_RT_REPO"
  DOCKER_JF_RT_REPO: "$DOCKER_JF_RT_REPO"

build-job:
  image: docker:28.0.1
  stage: npm_docker_build
  services:
    - docker:28.0.1-dind
  before_script:
    - docker info
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - apk add --update jq curl npm
    - |
      JF_ACCESS_TOKEN=$(curl -s -X POST -H "Content-Type: application/json" "https://${JF_URL}/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${GITLAB_OIDC_TOKEN}\", \"provider_name\": \"rkfrog-gitlab\"}")
      if [[ -n $(echo ${JF_ACCESS_TOKEN} | jq -r '.access_token') ]]; then
        export JF_ACCESS_TOKEN=$(echo ${JF_ACCESS_TOKEN} | jq -r '.access_token')
        echo "OIDC Access token from JFrog generated successfully"
      else
        echo "Failed to get OIDC token from JFrog"
        exit 1
      fi
    #### Install JFrog CLI
    - echo "Installing JFrog CLI"
    - !reference [.setup_jfrog, script]
    - export JFROG_CLI_BUILD_NAME="${CI_PIPELINE_NAME}"
    - export JFROG_CLI_BUILD_NUMBER="${CI_PIPELINE_ID}"
    - echo ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER}
    - jf --version
    #### JFrog CLI Confguration
    - jf c add setup-jfrog-gitlab-ci-server-${CI_JOB_ID} --url https://${JF_URL} --access-token ${JF_ACCESS_TOKEN} --interactive=false --overwrite=true 
    - jf c show
    - jf rt ping
    #### NPM Confguration
    - jf npm-config --repo-deploy=${NPM_JF_RT_REPO} -repo-resolve=${NPM_JF_RT_REPO}
    - jf npm config set registry https://${JF_URL}/artifactory/api/npm/${NPM_JF_RT_REPO}/
    - jf npm config list | jq -r .registry
    - ls -la /builds/${CI_PROJECT_PATH}
    - cat /builds/${CI_PROJECT_PATH}/.jfrog/projects/npm.yaml
    - export NPM_PACKAGE_BUILD_VERSION=$(cat /builds/${CI_PROJECT_PATH}/package.json | jq -r ."version")
    #### OSS JFrog Curation Audit
    - jf curation-audit
    #### JFrog audit - Secrets
    - jf audit --secrets --fail false
    #### JFrog audit - SAST
    - jf audit --sast --fail false
    #### Install NPM dependencies
    - jf npm ci --ignore-scripts --build-name ${JFROG_CLI_BUILD_NAME} --build-number ${JFROG_CLI_BUILD_NUMBER} --module npm-build --project=${JFROG_CLI_BUILD_PROJECT}
    #### NPM publish
    - jf rt build-add-git ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER} ./ --project=${JFROG_CLI_BUILD_PROJECT}
    - jf rt build-collect-env ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER} --project=${JFROG_CLI_BUILD_PROJECT}
    - jf npm publish --build-name ${JFROG_CLI_BUILD_NAME} --build-number ${JFROG_CLI_BUILD_NUMBER} --module npm-build --project=${JFROG_CLI_BUILD_PROJECT}
    #### Login to JFrog Docker repo
    - echo "${JF_ACCESS_TOKEN}" | docker login ${JF_URL} -u ${JF_USERNAME} --password-stdin
    #### Docker Build
    - echo "registry=https://${JF_URL}/artifactory/api/npm/${NPM_JF_RT_REPO}/" >> $HOME/.npmrc
    - echo "//${JF_URL}/artifactory/api/npm/${NPM_JF_RT_REPO}/:_authToken=${JF_ACCESS_TOKEN}" >> $HOME/.npmrc
    - jf docker image build --tag ${JF_URL}/$DOCKER_JF_RT_REPO/node-goat:${NPM_PACKAGE_BUILD_VERSION} --secret id=npmrc,src=$HOME/.npmrc --module docker-build --project=${JFROG_CLI_BUILD_PROJECT} --build-arg="REGISTRY_URL=${JF_URL}" --build-arg="DOCKER_REPO_NAME=${DOCKER_JF_RT_REPO}" --build-arg="NPM_REPO_NAME=$NPM_JF_RT_REPO" .
    - jf docker scan ${JF_URL}/$DOCKER_JF_RT_REPO/node-goat:${NPM_PACKAGE_BUILD_VERSION} --format json --threads 6
    - jf docker push ${JF_URL}/$DOCKER_JF_RT_REPO/node-goat:${NPM_PACKAGE_BUILD_VERSION} --module docker-build --project=${JFROG_CLI_BUILD_PROJECT}
    #### JFrog Build Publish
    - jf rt build-publish ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER} --project=${JFROG_CLI_BUILD_PROJECT}
    #### JFrog Build Scan
    - sleep 60
    - jf bs ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER} --vuln=true --project=${JFROG_CLI_BUILD_PROJECT} --format json